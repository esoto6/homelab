- name: Install cert-manager and configure ClusterIssuer for Let's Encrypt
  hosts: localhost
  vars_files:
    - vars.yml
    - secrets.yml

  tasks:
    - name: Ensure kubeconfig path is set
      set_fact:
        kubeconfig_path: "{{ lookup('env', 'HOME') }}/.kube/config"

    - name: Create cert-manager namespace
      kubernetes.core.k8s:
        name: cert-manager
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Apply cert-manager manifests
      kubernetes.core.k8s:
        state: present
        src: "https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml"
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Wait for cert-manager pods to be ready
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: cert-manager
      register: cert_manager_pods
      until: cert_manager_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length > 2
      retries: 20
      delay: 10
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Create Cloudflare API secret
      kubernetes.core.k8s:
        state: present
        namespace: cert-manager
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: cloudflare-api-token-secret
          type: Opaque
          data:
            api-token: "{{ lookup('ansible.builtin.env', 'CLOUDFLARE_API_TOKEN') | b64encode }}"
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Create ClusterIssuer for Let's Encrypt
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-prod
          spec:
            acme:
              email: "{{ cert_email }}"
              server: "https://acme-v02.api.letsencrypt.org/directory"
              privateKeySecretRef:
                name: letsencrypt-prod-key
              solvers:
                - dns01:
                    cloudflare:
                      email: "{{ cert_email }}"
                      apiTokenSecretRef:
                        name: cloudflare-api-token-secret
                        key: api-token
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Create Secret for Cloudflare API Token
      kubernetes.core.k8s:
        state: present
        namespace: cert-manager
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: cloudflare-api-token-secret
          type: Opaque
          data:
            api-token: "{{ cloudflare_token | b64encode }}"
        kubeconfig: "{{ kubeconfig_path }}"