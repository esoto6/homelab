
- name: Add External Secrets Helm repo
  kubernetes.core.helm_repository:
    name: "{{ eso_alias }}"
    repo_url: "{{ eso_repo }}"

# --- Install Block ---
- block:
    - name: Ensure namespace exists
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ eso_namespace }}"

    - name: Create self-signed Issuer
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: Issuer
          metadata:
            name: selfsigned-issuer
            namespace: "{{ eso_namespace }}"
          spec:
            selfSigned: {}

    - name: Create CA Certificate
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: ca-cert
            namespace: "{{ eso_namespace }}"
          spec:
            secretName: ca-secret
            isCA: true
            commonName: "Bitwarden SDK Server CA"
            issuerRef:
              name: selfsigned-issuer
              kind: Issuer

    - name: Wait for CA Certificate to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Certificate
        api_version: cert-manager.io/v1
        name: ca-cert
        namespace: "{{ eso_namespace }}"
      register: ca_cert_info
      retries: 15
      delay: 20
      until: ca_cert_info.resources[0].status.conditions | selectattr('type', 'equalto', 'Ready') | selectattr('status', 'equalto', 'True') | list | length > 0

    - name: Create CA Issuer
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: Issuer
          metadata:
            name: ca-issuer
            namespace: "{{ eso_namespace }}"
          spec:
            ca:
              secretName: ca-secret

    - name: Get CA cert from secret
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Secret
        namespace: "{{ eso_namespace }}"
        name: ca-secret
      register: ca_secret

    - name: Set ca_bundle fact
      set_fact:
        ca_bundle: "{{ ca_secret.resources[0].data['ca.crt'] }}"

    - name: Create Bitwarden SDK server Certificate
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: bitwarden-sdk-server-cert
            namespace: "{{ eso_namespace }}"
          spec:
            secretName: bitwarden-tls-certs
            issuerRef:
              name: ca-issuer
              kind: Issuer
            dnsNames:
              - bitwarden-sdk-server
              - bitwarden-sdk-server.{{ eso_namespace }}
              - bitwarden-sdk-server.{{ eso_namespace }}.svc
              - bitwarden-sdk-server.{{ eso_namespace }}.svc.cluster.local
            commonName: bitwarden-sdk-server

    - name: Wait for Bitwarden SDK Certificate to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Certificate
        api_version: cert-manager.io/v1
        name: bitwarden-sdk-server-cert
        namespace: "{{ eso_namespace }}"
      register: sdk_cert_info
      retries: 15
      delay: 20
      until: sdk_cert_info.resources[0].status.conditions | selectattr('type', 'equalto', 'Ready') | selectattr('status', 'equalto', 'True') | list | length > 0

    - name: Create Bitwarden access token Secret
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: bitwarden-access-token
            namespace: "{{ eso_namespace }}"
          stringData:
            token: "{{ eso_bitwarden_token }}"

    - name: Install External Secrets Operator via Helm
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        name: external-secrets
        chart_ref: "{{ eso_chart }}"
        namespace: "{{ eso_namespace }}"
        create_namespace: true
        chart_version: "{{ eso_version }}"
        values:
          bitwarden-sdk-server:
            enabled: true
            tls:
              enabled: true
              secretName: bitwarden-tls-certs
        take_ownership: true
      register: eso_install
      failed_when: eso_install.failed and "cannot re-use" not in eso_install.msg

    - name: Wait for ESO pods to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Pod
        namespace: "{{ eso_namespace }}"
        label_selectors:
          - "app.kubernetes.io/name=external-secrets"
      register: eso_pods
      retries: 30
      delay: 10
      until: eso_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length > 0

    - name: Create ClusterSecretStore
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: external-secrets.io/v1
          kind: ClusterSecretStore
          metadata:
            name: bitwarden-cluster-secretstore
          spec:
            provider:
              bitwardensecretsmanager:
                apiURL: https://api.bitwarden.com
                identityURL: https://identity.bitwarden.com
                auth:
                  secretRef:
                    credentials:
                      key: token
                      name: bitwarden-access-token
                      namespace: "{{ eso_namespace }}"
                bitwardenServerSDKURL: https://bitwarden-sdk-server.{{ eso_namespace }}.svc.cluster.local:9998
                organizationID: "{{ eso_bitwarden_org_id }}"
                projectID: "{{ eso_bitwarden_project_id }}"
                caBundle: "{{ ca_bundle }}"

    - name: Create test ExternalSecret
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: external-secrets.io/v1
          kind: ExternalSecret
          metadata:
            name: new-test
            namespace: "{{ eso_namespace }}"
          spec:
            refreshInterval: 1h
            secretStoreRef:
              name: bitwarden-cluster-secretstore
              kind: ClusterSecretStore
            target:
              name: new-test
              creationPolicy: Owner
              template:
                type: Opaque
            data:
              - secretKey: new-test
                remoteRef:
                  name: "new-test"
                  key: "password"
    
    - name: Wait for new-test secret to be created
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Secret
        namespace: "{{ eso_namespace }}"
        name: new-test
      register: test_secret_info
      retries: 10
      delay: 15
      until: test_secret_info.resources | length > 0

    - name: Verify test secret contains data
      ansible.builtin.assert:
        that:
          - test_secret_info.resources[0].data['new-test'] is defined
          - test_secret_info.resources[0].data['new-test'] | length > 0
        fail_msg: "The 'new-test' secret was created but has no data!"

  when: external_secrets_state is not defined or external_secrets_state == 'present'

# --- Uninstall Block ---
- block:
    - name: Delete all ExternalSecrets
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: absent
        kind: ExternalSecret
        namespace: "{{ eso_namespace }}"
      ignore_errors: true

    - name: Delete all ClusterSecretStores
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: absent
        kind: ClusterSecretStore
      ignore_errors: true

    - name: Delete bitwarden-access-token Secret
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: absent
        kind: Secret
        namespace: "{{ eso_namespace }}"
        name: bitwarden-access-token
      ignore_errors: true

    - name: Delete Bitwarden SDK server Certificate
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: absent
        kind: Certificate
        namespace: "{{ eso_namespace }}"
        name: bitwarden-sdk-server-cert
      ignore_errors: true

    - name: Delete CA Certificate
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: absent
        kind: Certificate
        namespace: "{{ eso_namespace }}"
        name: ca-cert
      ignore_errors: true

    - name: Delete CA Issuer
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: absent
        kind: Issuer
        namespace: "{{ eso_namespace }}"
        name: ca-issuer
      ignore_errors: true

    - name: Delete Self-Signed Issuer
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: absent
        kind: Issuer
        namespace: "{{ eso_namespace }}"
        name: selfsigned-issuer
      ignore_errors: true

    - name: Uninstall External Secrets Operator via Helm
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        name: external-secrets
        namespace: "{{ eso_namespace }}"
        state: absent
      ignore_errors: true

    - name: Delete External Secrets namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: absent
        kind: Namespace
        name: "{{ eso_namespace }}"
      ignore_errors: true

    - name: Remove finalizers from namespace if stuck
      ansible.builtin.shell: |
        kubectl get namespace {{ eso_namespace }} -o json \
        | jq 'del(.spec.finalizers)' \
        | kubectl replace --raw "/api/v1/namespaces/{{ eso_namespace }}/finalize" -f -
      ignore_errors: true
    
    - name: Delete ESO ClusterRoles
      ansible.builtin.command: >
        kubectl delete clusterrole external-secrets-cert-controller \
        external-secrets-edit \
        external-secrets-servicebindings \
        external-secrets-view \
        --ignore-not-found
      ignore_errors: true

    - name: Delete ESO ClusterRoleBindings
      ansible.builtin.command: >
        kubectl delete clusterrolebinding external-secrets-cert-controller \
        external-secrets-edit \
        external-secrets-servicebindings \
        external-secrets-view \
        --ignore-not-found
      ignore_errors: true

    - name: Delete ESO ValidatingWebhookConfiguration
      ansible.builtin.command:
        cmd: kubectl delete validatingwebhookconfiguration externalsecret-validate --ignore-not-found
      ignore_errors: true

    - name: Delete ESO MutatingWebhookConfiguration
      ansible.builtin.command:
        cmd: kubectl delete mutatingwebhookconfiguration externalsecret-mutate --ignore-not-found
      ignore_errors: true

  when: external_secrets_state is defined and external_secrets_state == 'absent'