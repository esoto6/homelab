---
- name: Add Jetstack Helm repo
  kubernetes.core.helm_repository:
    name: "{{ cert_manager_alias }}"
    repo_url: "{{ cert_manager_repo }}"

- block:
    - name: Ensure Cert-Manager namespace exists
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ cert_manager_namespace }}"

    - name: Install/Upgrade Cert-Manager
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        name: cert-manager
        chart_ref: "{{ cert_manager_chart }}"
        chart_version: "{{ cert_manager_version }}"
        release_namespace: "{{ cert_manager_namespace }}"
        create_namespace: true
        wait: true
        values:
          crds:
            enabled: true

    - name: Create Cloudflare API token secret
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: cloudflare-api-token
            namespace: "{{ cert_manager_namespace }}"
          stringData:
            api-token: "{{ domain_token }}"

    - name: Apply ClusterIssuer
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-stg
          spec:
            acme:
              email: "{{ domain_email }}"
              server: "https://acme-staging-v02.api.letsencrypt.org/directory"
              privateKeySecretRef:
                name: cloudflare-token
              solvers:
                - dns01:
                    cloudflare:
                      email: "{{ domain_email }}"
                      apiTokenSecretRef:
                        name: cloudflare-api-token
                        key: api-token

    - name: Apply Wildcard Certificate
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: wildcard-cert
            namespace: "{{ cert_manager_namespace }}"
          spec:
            secretName: wildcard-cert-tls
            issuerRef:
              name: letsencrypt-stg
              kind: ClusterIssuer
            commonName: "*.{{ domain_name }}"
            dnsNames:
              - "*.{{ domain_name }}"
              - "{{ domain_name }}"

    - name: Wait for wildcard certificate to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Certificate
        namespace: "{{ cert_manager_namespace }}"
        name: "wildcard-cert"
      register: wildcard_cert_status
      until: >
        (
          wildcard_cert_status.resources | length > 0
        ) and (
          (
            wildcard_cert_status.resources[0].status.conditions
            | selectattr('type', 'equalto', 'Ready')
            | selectattr('status', 'equalto', 'True')
            | list
          ) | length > 0
        )
      retries: 60
      delay: 10
      
  when: cert_manager_state == 'present'

    
- block:
    - name: Uninstall Cert-Manager
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        name: cert-manager
        release_namespace: "{{ cert_manager_namespace }}"
        state: absent

    - name: Delete Cert-Manager namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Namespace
        name: "{{ cert_manager_namespace }}"
        state: absent

    - name: Find namespaces with ACME Challenges
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Challenge
        api_version: acme.cert-manager.io/v1
      register: acme_challenges

    - name: Delete ACME Challenges
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: absent
        kind: Challenge
        api_version: acme.cert-manager.io/v1
        namespace: "{{ item.metadata.namespace }}"
      loop: "{{ acme_challenges.resources }}"
      ignore_errors: true

    - name: Delete cert-manager resources if CRD exists
      shell: |
        for crd in issuers.cert-manager.io clusterissuers.cert-manager.io certificates.cert-manager.io certificaterequests.cert-manager.io orders.acme.cert-manager.io challenges.acme.cert-manager.io; do
          if kubectl get crd $crd >/dev/null 2>&1; then
            kubectl delete --all --all-namespaces --ignore-not-found ${crd%%.*}
          fi
        done
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: Find namespaces with ACME Orders
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Order
        api_version: acme.cert-manager.io/v1
      register: acme_orders

    - name: Delete ACME Orders
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: absent
        kind: Order
        api_version: acme.cert-manager.io/v1
        namespace: "{{ item.metadata.namespace }}"
      loop: "{{ acme_orders.resources }}"
      ignore_errors: true

    - name: Remove Cert-Manager CRD finalizers if stuck
      ansible.builtin.shell: |
        crd={{ item }}
        if kubectl get crd "$crd" >/dev/null 2>&1; then
          kubectl get crd "$crd" -o json \
          | jq 'del(.metadata.finalizers)' \
          | kubectl replace --raw "/apis/apiextensions.k8s.io/v1/customresourcedefinitions/$crd/finalize" -f -
        fi
      loop:
        - certificates.cert-manager.io
        - certificaterequests.cert-manager.io
        - challenges.acme.cert-manager.io
        - orders.acme.cert-manager.io
        - issuers.cert-manager.io
        - clusterissuers.cert-manager.io
      changed_when: false
      ignore_errors: true
    
    - name: Delete Cert-Manager CRDs
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: absent
        kind: CustomResourceDefinition
        name: "{{ item }}"
      loop:
        - certificates.cert-manager.io
        - certificaterequests.cert-manager.io
        - orders.acme.cert-manager.io
        - challenges.acme.cert-manager.io
        - issuers.cert-manager.io
        - clusterissuers.cert-manager.io

    - name: Remove leftover Cert-Manager ClusterRoles
      ansible.builtin.shell: |
        for cr in $(kubectl get clusterrole -o custom-columns=":metadata.name" | grep cert-manager); do
          kubectl delete clusterrole $cr
        done
      changed_when: false
      ignore_errors: true

    - name: Remove leftover Cert-Manager ClusterRoleBindings
      ansible.builtin.shell: |
        for crb in $(kubectl get clusterrolebinding -o custom-columns=":metadata.name" | grep cert-manager); do
          kubectl delete clusterrolebinding $crb
        done
      changed_when: false
      ignore_errors: true

  when: cert_manager_state == 'absent'