---
- name: Add ArgoCD Helm repo
  kubernetes.core.helm_repository:
    name: "{{ argocd_alias }}"
    repo_url: "{{ argocd_repo }}"

- when: argocd_state is not defined or argocd_state == 'present'

  block:
    - name: Ensure ArgoCD namespace exists
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ argocd_namespace }}"

    - name: Create ArgoCD Certificate
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: argocd-cert
            namespace: "{{ argocd_namespace }}"
          spec:
            secretName: argocd-tls
            issuerRef:
              name: "{{ 'letsencrypt-prod' if k8s_env == 'prod' else 'letsencrypt-staging' }}"
              kind: ClusterIssuer

            dnsNames:
              - "{{ argocd_domain }}"

    - name: Wait for ArgoCD Certificate to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Certificate
        api_version: cert-manager.io/v1
        name: argocd-cert
        namespace: "{{ argocd_namespace }}"
      register: argocd_cert_info
      retries: 15
      delay: 20
      until: argocd_cert_info.resources[0].status.conditions | selectattr('type', 'equalto', 'Ready') | selectattr('status', 'equalto', 'True') | list | length > 0

    - name: Create admin password ExternalSecret
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: external-secrets.io/v1
          kind: ExternalSecret
          metadata:
            name: argocd-admin-secret
            namespace: "{{ argocd_namespace }}"
          spec:
            refreshInterval: "1h"
            secretStoreRef:
              name: bitwarden-cluster-secretstore
              kind: ClusterSecretStore
            target:
              name: argocd-admin-secret
              creationPolicy: Owner
            data:
              - secretKey: argocd_password
                remoteRef:
                  name: "argocd-password"
                  key: argocd-password

    - name: Wait for argocd-admin-secret to be created by External Secrets
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        namespace: "{{ argocd_namespace }}"
        name: argocd-admin-secret
      register: argocd_admin_secret
      until: argocd_admin_secret.resources | length > 0
      retries: 10
      delay: 15

    - name: Install ArgoCD via Helm
      kubernetes.core.helm:
        name: argocd
        chart_ref: argo/argo-cd
        chart_version: "{{ argocd_version }}"
        release_namespace: "{{ argocd_namespace }}"
        create_namespace: false
        update_repo_cache: true
        values:
          global:
            domain: "{{ argocd_domain }}"
          configs:
            cm:
              kustomize.buildOptions: "--enable-helm"
            secret:
              admin:
                existingSecret: argocd-admin-secret
                passwordKey: argocd_password
          secret:
            createSecret: false
          server:
            ingress:
              enabled: false
            service:
              type: ClusterIP
              ports:
                - name: http
                  port: 80
                  targetPort: 8080
                - name: https
                  port: 443
                  targetPort: 8080
            extraArgs:
              - --insecure

    - name: Read ESO secret for ArgoCD password
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        namespace: "{{ argocd_namespace }}"
        name: argocd-admin-secret
      register: eso_secret

    - name: Decode ArgoCD admin password from secret
      ansible.builtin.set_fact:
        decoded_argocd_password: "{{ eso_secret.resources[0].data['argocd_password'] | b64decode | trim }}"
      when: eso_secret.resources | length > 0
      no_log: false

    - name: Debug decoded password and length
      ansible.builtin.debug:
        msg:
          - "Decoded password: {{ decoded_argocd_password }}"
          - "Length: {{ decoded_argocd_password | length }}"

    - name: Generate bcrypt hash of password (for ArgoCD)
      ansible.builtin.set_fact:
        argocd_bcrypt_password: "{{ decoded_argocd_password | password_hash('bcrypt') }}"
      when: decoded_argocd_password is defined

    - name: Patch ArgoCD secret with bcrypt password
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: patched
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: argocd-secret
            namespace: "{{ argocd_namespace }}"
          stringData:
            admin.password: "{{ argocd_bcrypt_password }}"
            admin.passwordMtime: "{{ lookup('pipe', 'date +%FT%T%Z') }}"
      when: argocd_bcrypt_password is defined

    - name: Apply ArgoCD IngressRoute for Traefik
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: argocd-server
            namespace: "{{ argocd_namespace }}"
          spec:
            entryPoints:
              - websecure
            routes:
              - match: Host(`{{ argocd_domain }}`)
                kind: Rule
                priority: 10
                services:
                  - name: argocd-server
                    port: 80
              - kind: Rule
                match: Host(`{{ argocd_domain }}`) && Header(`Content-Type`, `application/grpc`)
                priority: 11
                services:
                  - name: argocd-server
                    port: 80
                    scheme: h2c
            tls:
              secretName: traefik-tls

    - name: Wait for ArgoCD server deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ argocd_namespace }}"
        name: argocd-server
      register: argocd_server
      until: >
        argocd_server.resources | length > 0 and
        (argocd_server.resources[0].status.availableReplicas | default(0)) > 0
      retries: 15
      delay: 20

- when: argocd_state is defined and argocd_state == 'absent'
  block:
    - name: Get all CRDs for ArgoCD
      ansible.builtin.command: >
        kubectl get crds -o name | grep argoproj.io
      register: argocd_crds
      failed_when: false
      changed_when: false

    - name: Delete all ArgoCD CRDs
      ansible.builtin.command: >
        kubectl delete {{ item }}
      loop: "{{ argocd_crds.stdout_lines | default([]) }}"
      when: argocd_crds.stdout != ""
      ignore_errors: true

    - name: Uninstall ArgoCD Helm release
      kubernetes.core.helm:
        name: argocd
        release_namespace: "{{ argocd_namespace }}"
        state: absent

    - name: Delete ArgoCD namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Namespace
        name: "{{ argocd_namespace }}"
        state: absent
      ignore_errors: true

    - name: Remove finalizers from namespace if stuck
      kubernetes.core.k8s:
        state: patched
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ argocd_namespace }}"
          spec:
            finalizers: []
            ignore_errors: true
