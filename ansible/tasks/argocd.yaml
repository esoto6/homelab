---
- name: Add ArgoCD Helm repo
  ansible.builtin.command: >
    helm repo add argo https://argoproj.github.io/argo-helm
  ignore_errors: true
  register: helm_repo_add
  changed_when: "'already exists' not in helm_repo_add.stdout"
  when: argocd_state is not defined or argocd_state == 'present'

- name: Update Helm repos
  ansible.builtin.command:
    cmd: helm repo update
  when: argocd_state is not defined or argocd_state == 'present'
  
- name: Ensure argocd namespace exists
  ansible.builtin.copy:
    dest: /tmp/argocd-namespace.yaml
    content: |
      apiVersion: v1
      kind: Namespace
      metadata:
        name: argocd
  when: argocd_state is not defined or argocd_state == 'present'

- name: Apply argocd namespace
  kubernetes.core.k8s:
    state: present
    src: /tmp/argocd-namespace.yaml
  when: argocd_state is not defined or argocd_state == 'present'

- name: Install ArgoCD via Helm
  ansible.builtin.command: >
    helm upgrade --install argocd argo/argo-cd
    --namespace argocd
    --create-namespace
    --version {{ argocd.version }}
    --set global.domain=argocd.rubberduckops.com
    --set configs.cm.kustomize.buildOptions="--enable-helm"
    --set configs.secret.admin.existingSecret=argocd-admin-secret
    --set server.ingress.enabled=false
    --set server.server.type=ClusterIP
    --set server.server.ports[0].name=http
    --set server.server.ports[0].port=80
    --set server.server.ports[0].targetPort=8080
    --set server.server.ports[1].name=https
    --set server.server.ports[1].port=443
    --set server.server.ports[1].targetPort=8080
    --set server.extraArgs[0]=--insecure
  register: argocd_install
  retries: 5
  delay: 15
  until: argocd_install.rc == 0
  when: argocd_state is not defined or argocd_state == 'present'

- name: Cretea treafik ingres manifest
  ansible.builtin.copy:
    dest: /tmp/argocd-ingress.yaml
    content: |
      apiVersion: traefik.io/v1alpha1
      kind: IngressRoute
      metadata:
        name: argocd-server
        namespace: argocd
      spec:
        entryPoints:
          - websecure
        routes:
          - match: Host(`argocd.rubberduckops.com`)
            kind: Rule
            priority: 10
            services:
              - name: argocd-server
                port: 80
          - kind: Rule
            match: Host(`argocd.ruberduckops.com`) && Header(`Content-Type`, `application/grpc`)
            priority: 11
            services:
              - name: argocd-server
                port: 80
                scheme: h2c
        tls:
          secretName: wildcard-cert-tls
  when: argocd_state is not defined or argocd_state == 'present'

- name: Apply argocd ingress
  kubernetes.core.k8s:
    state: present
    src: /tmp/argocd-ingress.yaml
  when: argocd_state is not defined or argocd_state == 'present'

- name: Create argocd config map configs.cm.kustomize.buildOptions
  ansible.builtin.copy:
    dest: /tmp/argocd-kustomize-build-options.yaml
    content: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: argocd-cm
        namespace: argocd
      data:
        kustomize.buildOptions: --enable-helm
  when: argocd_state is not defined or argocd_state == 'present'

- name: Apply argocd config map configs.cm.kustomize.buildOptions
  kubernetes.core.k8s:
    state: present
    src: /tmp/argocd-kustomize-build-options.yaml
  when: argocd_state is not defined or argocd_state == 'present'
  
- name: Wait for ArgoCD server deployment to be ready
  ansible.builtin.command:
    cmd: kubectl rollout status deployment/argocd-server -n argocd --timeout=180s
  register: argocd_ready
  retries: 10
  delay: 15
  until: argocd_ready.rc == 0
  when: argocd_state is not defined or argocd_state == 'present'

- name: Uninstall ArgoCD
  ansible.builtin.command: >
    helm uninstall argocd -n argocd
  ignore_errors: true
  when: argocd_state is defined and argocd_state == 'absent'

- name: Delete argocd namespace
  ansible.builtin.command: >
    kubectl delete namespace argocd
  ignore_errors: true
  when: argocd_state is defined and argocd_state == 'absent'

- name: Remove finalizers from namespace (if stuck)
  ansible.builtin.command: >
    kubectl get namespace argocd -o json |
    jq 'del(.spec.finalizers)' |
    kubectl replace --raw "/api/v1/namespaces/argocd/finalize" -f -
  ignore_errors: true
  when: argocd_state is defined and argocd_state == 'absent'
