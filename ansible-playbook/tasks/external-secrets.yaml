---
- name: Add External Secrets Helm repo
  ansible.builtin.command: >
    helm repo add external-secrets https://charts.external-secrets.io
  ignore_errors: true
  register: helm_repo_add
  changed_when: "'already exists' not in helm_repo_add.stdout"
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Update Helm repos
  ansible.builtin.command: 
    cmd: helm repo update
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Ensure external-secrets-system namespace exists
  ansible.builtin.copy:
    dest: /tmp/external-secrets-namespace.yaml
    content: |
      apiVersion: v1
      kind: Namespace
      metadata:
        name: external-secrets-system
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Apply external-secrets-system namespace
  kubernetes.core.k8s:
    state: present
    src: /tmp/external-secrets-namespace.yaml
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Create self-signed issuer
  ansible.builtin.copy:
    dest: /tmp/selfsigned-issuer.yaml
    content: |
      apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        name: selfsigned-issuer
        namespace: external-secrets-system
      spec:
        selfSigned: {}
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Apply self-signed issuer
  kubernetes.core.k8s:
    state: present
    src: /tmp/selfsigned-issuer.yaml
  when: external_secrets_state is not defined or external_secrets_state == 'present'


- name: Create CA cert
  ansible.builtin.copy:
    dest: /tmp/ca-cert.yaml
    content: |
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: ca-cert
        namespace: external-secrets-system
      spec:
        secretName: ca-secret
        isCA: true
        commonName: "Bitwarden SDK Server CA"
        issuerRef:
          name: selfsigned-issuer
          kind: Issuer
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Apply CA cert
  kubernetes.core.k8s:
    state: present
    src: /tmp/ca-cert.yaml
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Wait for CA cert to be ready
  ansible.builtin.command: >
    kubectl get certificate ca-cert -n external-secrets-system
    -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
  register: ca_cert_ready
  retries: 15
  delay: 20
  until: ca_cert_ready.stdout == "True"
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Create CA Issuer
  ansible.builtin.copy:
    dest: /tmp/ca-issuer.yaml
    content: |
      apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        name: ca-issuer
        namespace: external-secrets-system
      spec:
        ca:
          secretName: ca-secret
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Apply CA Issuer
  kubernetes.core.k8s:
    state: present
    src: /tmp/ca-issuer.yaml
  when: external_secrets_state is not defined or external_secrets_state == 'present'


- name: Create Bitwarden SDK server certificate
  ansible.builtin.copy:
    dest: /tmp/bitwarden-sdk-cert.yaml
    content: |
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: bitwarden-sdk-server-cert
        namespace: external-secrets-system
      spec:
        secretName: bitwarden-tls-certs
        issuerRef:
          name: ca-issuer
          kind: Issuer
        dnsNames:
          - bitwarden-sdk-server
          - bitwarden-sdk-server.external-secrets-system
          - bitwarden-sdk-server.external-secrets-system.svc
          - bitwarden-sdk-server.external-secrets-system.svc.cluster.local
        commonName: bitwarden-sdk-server
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Apply Bitwarden SDK server certificate
  kubernetes.core.k8s:
    state: present
    src: /tmp/bitwarden-sdk-cert.yaml
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Wait for Bitwarden SDK cert to be ready
  ansible.builtin.command: >
    kubectl get certificate bitwarden-sdk-server-cert -n external-secrets-system
    -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
  register: sdk_cert_ready
  retries: 15
  delay: 20
  until: sdk_cert_ready.stdout == "True"
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Create Bitwarden access token secret
  ansible.builtin.command: >
    kubectl create secret generic bitwarden-access-token
    --from-literal=token={{ bitwarden_access_token }}
  ignore_errors: true
  when: external_secrets_state is not defined or external_secrets_state == 'present'
 

- name: Install External Secrets Operator
  ansible.builtin.command: >
    helm install external-secrets external-secrets/external-secrets
    -n external-secrets-system
    --create-namespace
    --set bitwarden-sdk-server.enabled=true
    --set bitwarden-sdk-server.tls.enabled=true
    --set bitwarden-sdk-server.tls.secretName=bitwarden-tls-certs
  register: eso_install
  failed_when: eso_install.rc != 0 and "cannot re-use" not in eso_install.stderr
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Wait for ESO pods to be ready
  ansible.builtin.command: >
    kubectl wait --for=condition=ready pod
    -l app.kubernetes.io/name=external-secrets -n external-secrets-system
    --timeout=600s
  register: eso_ready
  failed_when: eso_ready.rc != 0
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Get CA cert from secret
  command: kubectl get secret ca-secret -n external-secrets-system -o jsonpath='{.data.ca\.crt}'
  register: ca_secret
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Set caBundle fact
  set_fact:
    ca_bundle: "{{ ca_secret.stdout }}"
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Create ClusterSecretStore
  ansible.builtin.copy:
    dest: /tmp/clustersecretstore.yaml
    content: |
      apiVersion: external-secrets.io/v1
      kind: ClusterSecretStore
      metadata:
        name: bitwarden-cluster-secretstore
      spec:
        provider:
          bitwardensecretsmanager:
            apiURL: https://api.bitwarden.com
            identityURL: https://identity.bitwarden.com
            auth:
              secretRef:
                credentials:
                  key: token
                  name: bitwarden-access-token
                  namespace: default
            bitwardenServerSDKURL: https://bitwarden-sdk-server.external-secrets-system.svc.cluster.local:9998
            organizationID: "{{ bitwarden_organization_id }}"
            projectID: "{{ bitwarden_project_id }}"
            caBundle: "{{ ca_bundle }}"
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Apply ClusterSecretStore
  kubernetes.core.k8s:
    state: present
    src: /tmp/clustersecretstore.yaml
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Test Secret Retrieval
  ansible.builtin.copy:
    dest: /tmp/new-test.yaml
    content: |
      apiVersion: external-secrets.io/v1
      kind: ExternalSecret
      metadata:
        name: new-test
        namespace: external-secrets-system
      spec:
        refreshInterval: 1h
        secretStoreRef:
          name: bitwarden-cluster-secretstore
          kind: ClusterSecretStore
        target:
          name: new-test
          creationPolicy: Owner
          template:
            type: Opaque
        data:
          - secretKey: new-test
            remoteRef:
              name: "new-test"
              key: "password"
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Apply test ExternalSecret
  kubernetes.core.k8s:
    state: present
    src: /tmp/new-test.yaml
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Test retrieval of new-test secret
  ansible.builtin.shell: >
    kubectl get secret new-test -n external-secrets-system \
    -o jsonpath='{.data.new-test}' | base64 --decode
  register: new_test_secret
  retries: 10
  delay: 15
  until: new_test_secret.stdout | length > 0
  when: external_secrets_state is not defined or external_secrets_state == 'present'

- name: Uninstall External Secrets Operator
  ansible.builtin.command: >
    helm uninstall external-secrets -n external-secrets-system
  ignore_errors: true
  when: external_secrets_state is defined and external_secrets_state == 'absent'

- name: Delete external-secrets-system namespace
  ansible.builtin.command: >
    kubectl delete namespace external-secrets-system
  ignore_errors: true
  when: external_secrets_state is defined and external_secrets_state == 'absent'

- name: Remove finalizers from namespace (if stuck)
  ansible.builtin.command: 
    cmd:
      kubectl get namespace external-secrets-system -o json |
      jq 'del(.spec.finalizers)' |
      kubectl replace --raw "/api/v1/namespaces/external-secrets-system/finalize" -f -
  ignore_errors: true
  when: external_secrets_state is defined and external_secrets_state == 'absent'